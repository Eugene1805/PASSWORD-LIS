//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PASSWORD_LIS_Client.FriendsManagerServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendDTO", Namespace="http://schemas.datacontract.org/2004/07/Services.Contracts.DTOs")]
    [System.SerializableAttribute()]
    public partial class FriendDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlayerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nickname {
            get {
                return this.NicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.NicknameField, value) != true)) {
                    this.NicknameField = value;
                    this.RaisePropertyChanged("Nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlayerId {
            get {
                return this.PlayerIdField;
            }
            set {
                if ((this.PlayerIdField.Equals(value) != true)) {
                    this.PlayerIdField = value;
                    this.RaisePropertyChanged("PlayerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendRequestResult", Namespace="http://schemas.datacontract.org/2004/07/Services.Contracts")]
    public enum FriendRequestResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserNotFound = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlreadyFriends = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RequestAlreadySent = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FriendsManagerServiceReference.IFriendsManager", CallbackContract=typeof(PASSWORD_LIS_Client.FriendsManagerServiceReference.IFriendsManagerCallback))]
    public interface IFriendsManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsManager/SubscribeToFriendUpdates")]
        void SubscribeToFriendUpdates(int userAccountId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsManager/SubscribeToFriendUpdates")]
        System.Threading.Tasks.Task SubscribeToFriendUpdatesAsync(int userAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/GetFriends", ReplyAction="http://tempuri.org/IFriendsManager/GetFriendsResponse")]
        PASSWORD_LIS_Client.FriendsManagerServiceReference.FriendDTO[] GetFriends(int userAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/GetFriends", ReplyAction="http://tempuri.org/IFriendsManager/GetFriendsResponse")]
        System.Threading.Tasks.Task<PASSWORD_LIS_Client.FriendsManagerServiceReference.FriendDTO[]> GetFriendsAsync(int userAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/SendFriendRequest", ReplyAction="http://tempuri.org/IFriendsManager/SendFriendRequestResponse")]
        PASSWORD_LIS_Client.FriendsManagerServiceReference.FriendRequestResult SendFriendRequest(string addresseeEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/SendFriendRequest", ReplyAction="http://tempuri.org/IFriendsManager/SendFriendRequestResponse")]
        System.Threading.Tasks.Task<PASSWORD_LIS_Client.FriendsManagerServiceReference.FriendRequestResult> SendFriendRequestAsync(string addresseeEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/DeleteFriend", ReplyAction="http://tempuri.org/IFriendsManager/DeleteFriendResponse")]
        bool DeleteFriend(int currentPlayerId, int friendToDeleteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/DeleteFriend", ReplyAction="http://tempuri.org/IFriendsManager/DeleteFriendResponse")]
        System.Threading.Tasks.Task<bool> DeleteFriendAsync(int currentPlayerId, int friendToDeleteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/GetPendingRequests", ReplyAction="http://tempuri.org/IFriendsManager/GetPendingRequestsResponse")]
        PASSWORD_LIS_Client.FriendsManagerServiceReference.FriendDTO[] GetPendingRequests();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/GetPendingRequests", ReplyAction="http://tempuri.org/IFriendsManager/GetPendingRequestsResponse")]
        System.Threading.Tasks.Task<PASSWORD_LIS_Client.FriendsManagerServiceReference.FriendDTO[]> GetPendingRequestsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/RespondToFriendRequest", ReplyAction="http://tempuri.org/IFriendsManager/RespondToFriendRequestResponse")]
        void RespondToFriendRequest(int requesterPlayerId, bool accepted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/RespondToFriendRequest", ReplyAction="http://tempuri.org/IFriendsManager/RespondToFriendRequestResponse")]
        System.Threading.Tasks.Task RespondToFriendRequestAsync(int requesterPlayerId, bool accepted);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendsManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsManager/OnFriendRequestReceived")]
        void OnFriendRequestReceived(PASSWORD_LIS_Client.FriendsManagerServiceReference.FriendDTO requester);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsManager/OnFriendAdded")]
        void OnFriendAdded(PASSWORD_LIS_Client.FriendsManagerServiceReference.FriendDTO newFriend);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsManager/OnFriendRemoved")]
        void OnFriendRemoved(int friendPlayerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendsManagerChannel : PASSWORD_LIS_Client.FriendsManagerServiceReference.IFriendsManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendsManagerClient : System.ServiceModel.DuplexClientBase<PASSWORD_LIS_Client.FriendsManagerServiceReference.IFriendsManager>, PASSWORD_LIS_Client.FriendsManagerServiceReference.IFriendsManager {
        
        public FriendsManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FriendsManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FriendsManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendsManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendsManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscribeToFriendUpdates(int userAccountId) {
            base.Channel.SubscribeToFriendUpdates(userAccountId);
        }
        
        public System.Threading.Tasks.Task SubscribeToFriendUpdatesAsync(int userAccountId) {
            return base.Channel.SubscribeToFriendUpdatesAsync(userAccountId);
        }
        
        public PASSWORD_LIS_Client.FriendsManagerServiceReference.FriendDTO[] GetFriends(int userAccountId) {
            return base.Channel.GetFriends(userAccountId);
        }
        
        public System.Threading.Tasks.Task<PASSWORD_LIS_Client.FriendsManagerServiceReference.FriendDTO[]> GetFriendsAsync(int userAccountId) {
            return base.Channel.GetFriendsAsync(userAccountId);
        }
        
        public PASSWORD_LIS_Client.FriendsManagerServiceReference.FriendRequestResult SendFriendRequest(string addresseeEmail) {
            return base.Channel.SendFriendRequest(addresseeEmail);
        }
        
        public System.Threading.Tasks.Task<PASSWORD_LIS_Client.FriendsManagerServiceReference.FriendRequestResult> SendFriendRequestAsync(string addresseeEmail) {
            return base.Channel.SendFriendRequestAsync(addresseeEmail);
        }
        
        public bool DeleteFriend(int currentPlayerId, int friendToDeleteId) {
            return base.Channel.DeleteFriend(currentPlayerId, friendToDeleteId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFriendAsync(int currentPlayerId, int friendToDeleteId) {
            return base.Channel.DeleteFriendAsync(currentPlayerId, friendToDeleteId);
        }
        
        public PASSWORD_LIS_Client.FriendsManagerServiceReference.FriendDTO[] GetPendingRequests() {
            return base.Channel.GetPendingRequests();
        }
        
        public System.Threading.Tasks.Task<PASSWORD_LIS_Client.FriendsManagerServiceReference.FriendDTO[]> GetPendingRequestsAsync() {
            return base.Channel.GetPendingRequestsAsync();
        }
        
        public void RespondToFriendRequest(int requesterPlayerId, bool accepted) {
            base.Channel.RespondToFriendRequest(requesterPlayerId, accepted);
        }
        
        public System.Threading.Tasks.Task RespondToFriendRequestAsync(int requesterPlayerId, bool accepted) {
            return base.Channel.RespondToFriendRequestAsync(requesterPlayerId, accepted);
        }
    }
}
