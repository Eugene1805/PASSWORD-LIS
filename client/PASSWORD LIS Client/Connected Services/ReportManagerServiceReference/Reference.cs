//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PASSWORD_LIS_Client.ReportManagerServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReportDTO", Namespace="http://schemas.datacontract.org/2004/07/Services.Contracts.DTOs")]
    [System.SerializableAttribute()]
    public partial class ReportDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReportedPlayerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReporterPlayerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReportedPlayerId {
            get {
                return this.ReportedPlayerIdField;
            }
            set {
                if ((this.ReportedPlayerIdField.Equals(value) != true)) {
                    this.ReportedPlayerIdField = value;
                    this.RaisePropertyChanged("ReportedPlayerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReporterPlayerId {
            get {
                return this.ReporterPlayerIdField;
            }
            set {
                if ((this.ReporterPlayerIdField.Equals(value) != true)) {
                    this.ReporterPlayerIdField = value;
                    this.RaisePropertyChanged("ReporterPlayerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ReportManagerServiceReference.IReportManager", CallbackContract=typeof(PASSWORD_LIS_Client.ReportManagerServiceReference.IReportManagerCallback))]
    public interface IReportManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IReportManager/SubscribeToReportUpdates")]
        void SubscribeToReportUpdates(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IReportManager/SubscribeToReportUpdates")]
        System.Threading.Tasks.Task SubscribeToReportUpdatesAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/SubmitReport", ReplyAction="http://tempuri.org/IReportManager/SubmitReportResponse")]
        bool SubmitReport(PASSWORD_LIS_Client.ReportManagerServiceReference.ReportDTO reportDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/SubmitReport", ReplyAction="http://tempuri.org/IReportManager/SubmitReportResponse")]
        System.Threading.Tasks.Task<bool> SubmitReportAsync(PASSWORD_LIS_Client.ReportManagerServiceReference.ReportDTO reportDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetCurrentReportCount", ReplyAction="http://tempuri.org/IReportManager/GetCurrentReportCountResponse")]
        int GetCurrentReportCount(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetCurrentReportCount", ReplyAction="http://tempuri.org/IReportManager/GetCurrentReportCountResponse")]
        System.Threading.Tasks.Task<int> GetCurrentReportCountAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/IsPlayerBanned", ReplyAction="http://tempuri.org/IReportManager/IsPlayerBannedResponse")]
        bool IsPlayerBanned(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/IsPlayerBanned", ReplyAction="http://tempuri.org/IReportManager/IsPlayerBannedResponse")]
        System.Threading.Tasks.Task<bool> IsPlayerBannedAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IReportManager/UnsubscribeFromReportUpdates")]
        void UnsubscribeFromReportUpdates(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IReportManager/UnsubscribeFromReportUpdates")]
        System.Threading.Tasks.Task UnsubscribeFromReportUpdatesAsync(int playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IReportManager/OnReportReceived")]
        void OnReportReceived(string reporterNickname, string reason);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IReportManager/OnReportCountUpdated")]
        void OnReportCountUpdated(int newReportCount);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IReportManager/OnPlayerBanned")]
        void OnPlayerBanned(System.DateTime banLiftTime);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IReportManager/OnPlayerUnbanned")]
        void OnPlayerUnbanned();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportManagerChannel : PASSWORD_LIS_Client.ReportManagerServiceReference.IReportManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportManagerClient : System.ServiceModel.DuplexClientBase<PASSWORD_LIS_Client.ReportManagerServiceReference.IReportManager>, PASSWORD_LIS_Client.ReportManagerServiceReference.IReportManager {
        
        public ReportManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ReportManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ReportManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscribeToReportUpdates(int playerId) {
            base.Channel.SubscribeToReportUpdates(playerId);
        }
        
        public System.Threading.Tasks.Task SubscribeToReportUpdatesAsync(int playerId) {
            return base.Channel.SubscribeToReportUpdatesAsync(playerId);
        }
        
        public bool SubmitReport(PASSWORD_LIS_Client.ReportManagerServiceReference.ReportDTO reportDTO) {
            return base.Channel.SubmitReport(reportDTO);
        }
        
        public System.Threading.Tasks.Task<bool> SubmitReportAsync(PASSWORD_LIS_Client.ReportManagerServiceReference.ReportDTO reportDTO) {
            return base.Channel.SubmitReportAsync(reportDTO);
        }
        
        public int GetCurrentReportCount(int playerId) {
            return base.Channel.GetCurrentReportCount(playerId);
        }
        
        public System.Threading.Tasks.Task<int> GetCurrentReportCountAsync(int playerId) {
            return base.Channel.GetCurrentReportCountAsync(playerId);
        }
        
        public bool IsPlayerBanned(int playerId) {
            return base.Channel.IsPlayerBanned(playerId);
        }
        
        public System.Threading.Tasks.Task<bool> IsPlayerBannedAsync(int playerId) {
            return base.Channel.IsPlayerBannedAsync(playerId);
        }
        
        public void UnsubscribeFromReportUpdates(int playerId) {
            base.Channel.UnsubscribeFromReportUpdates(playerId);
        }
        
        public System.Threading.Tasks.Task UnsubscribeFromReportUpdatesAsync(int playerId) {
            return base.Channel.UnsubscribeFromReportUpdatesAsync(playerId);
        }
    }
}
