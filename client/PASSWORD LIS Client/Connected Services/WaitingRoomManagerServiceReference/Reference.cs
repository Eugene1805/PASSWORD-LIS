//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PASSWORD_LIS_Client.WaitingRoomManagerServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatMessage", Namespace="http://schemas.datacontract.org/2004/07/Services.Contracts.DTOs")]
    [System.SerializableAttribute()]
    public partial class ChatMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SenderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderNicknameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SenderId {
            get {
                return this.SenderIdField;
            }
            set {
                if ((this.SenderIdField.Equals(value) != true)) {
                    this.SenderIdField = value;
                    this.RaisePropertyChanged("SenderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderNickname {
            get {
                return this.SenderNicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderNicknameField, value) != true)) {
                    this.SenderNicknameField = value;
                    this.RaisePropertyChanged("SenderNickname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerDTO", Namespace="http://schemas.datacontract.org/2004/07/Services.Contracts.DTOs")]
    [System.SerializableAttribute()]
    public partial class PlayerDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsReadyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PhotoIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReady {
            get {
                return this.IsReadyField;
            }
            set {
                if ((this.IsReadyField.Equals(value) != true)) {
                    this.IsReadyField = value;
                    this.RaisePropertyChanged("IsReady");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nickname {
            get {
                return this.NicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.NicknameField, value) != true)) {
                    this.NicknameField = value;
                    this.RaisePropertyChanged("Nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PhotoId {
            get {
                return this.PhotoIdField;
            }
            set {
                if ((this.PhotoIdField.Equals(value) != true)) {
                    this.PhotoIdField = value;
                    this.RaisePropertyChanged("PhotoId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WaitingRoomManagerServiceReference.IWaitingRoomManager", CallbackContract=typeof(PASSWORD_LIS_Client.WaitingRoomManagerServiceReference.IWaitingRoomManagerCallback))]
    public interface IWaitingRoomManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaitingRoomManager/JoinAsRegisteredPlayer", ReplyAction="http://tempuri.org/IWaitingRoomManager/JoinAsRegisteredPlayerResponse")]
        bool JoinAsRegisteredPlayer(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaitingRoomManager/JoinAsRegisteredPlayer", ReplyAction="http://tempuri.org/IWaitingRoomManager/JoinAsRegisteredPlayerResponse")]
        System.Threading.Tasks.Task<bool> JoinAsRegisteredPlayerAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaitingRoomManager/JoinAsGuest", ReplyAction="http://tempuri.org/IWaitingRoomManager/JoinAsGuestResponse")]
        bool JoinAsGuest(string guestNickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaitingRoomManager/JoinAsGuest", ReplyAction="http://tempuri.org/IWaitingRoomManager/JoinAsGuestResponse")]
        System.Threading.Tasks.Task<bool> JoinAsGuestAsync(string guestNickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaitingRoomManager/LeaveRoom", ReplyAction="http://tempuri.org/IWaitingRoomManager/LeaveRoomResponse")]
        void LeaveRoom(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaitingRoomManager/LeaveRoom", ReplyAction="http://tempuri.org/IWaitingRoomManager/LeaveRoomResponse")]
        System.Threading.Tasks.Task LeaveRoomAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaitingRoomManager/SendMessage", ReplyAction="http://tempuri.org/IWaitingRoomManager/SendMessageResponse")]
        void SendMessage(PASSWORD_LIS_Client.WaitingRoomManagerServiceReference.ChatMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaitingRoomManager/SendMessage", ReplyAction="http://tempuri.org/IWaitingRoomManager/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(PASSWORD_LIS_Client.WaitingRoomManagerServiceReference.ChatMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaitingRoomManager/GetConnectedPlayers", ReplyAction="http://tempuri.org/IWaitingRoomManager/GetConnectedPlayersResponse")]
        PASSWORD_LIS_Client.WaitingRoomManagerServiceReference.PlayerDTO[] GetConnectedPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaitingRoomManager/GetConnectedPlayers", ReplyAction="http://tempuri.org/IWaitingRoomManager/GetConnectedPlayersResponse")]
        System.Threading.Tasks.Task<PASSWORD_LIS_Client.WaitingRoomManagerServiceReference.PlayerDTO[]> GetConnectedPlayersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWaitingRoomManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWaitingRoomManager/OnPlayerJoined")]
        void OnPlayerJoined(PASSWORD_LIS_Client.WaitingRoomManagerServiceReference.PlayerDTO player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWaitingRoomManager/OnPlayerLeft")]
        void OnPlayerLeft(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWaitingRoomManager/OnMessageReceived")]
        void OnMessageReceived(PASSWORD_LIS_Client.WaitingRoomManagerServiceReference.ChatMessage message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWaitingRoomManagerChannel : PASSWORD_LIS_Client.WaitingRoomManagerServiceReference.IWaitingRoomManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WaitingRoomManagerClient : System.ServiceModel.DuplexClientBase<PASSWORD_LIS_Client.WaitingRoomManagerServiceReference.IWaitingRoomManager>, PASSWORD_LIS_Client.WaitingRoomManagerServiceReference.IWaitingRoomManager {
        
        public WaitingRoomManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WaitingRoomManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WaitingRoomManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WaitingRoomManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WaitingRoomManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool JoinAsRegisteredPlayer(string email) {
            return base.Channel.JoinAsRegisteredPlayer(email);
        }
        
        public System.Threading.Tasks.Task<bool> JoinAsRegisteredPlayerAsync(string email) {
            return base.Channel.JoinAsRegisteredPlayerAsync(email);
        }
        
        public bool JoinAsGuest(string guestNickname) {
            return base.Channel.JoinAsGuest(guestNickname);
        }
        
        public System.Threading.Tasks.Task<bool> JoinAsGuestAsync(string guestNickname) {
            return base.Channel.JoinAsGuestAsync(guestNickname);
        }
        
        public void LeaveRoom(int playerId) {
            base.Channel.LeaveRoom(playerId);
        }
        
        public System.Threading.Tasks.Task LeaveRoomAsync(int playerId) {
            return base.Channel.LeaveRoomAsync(playerId);
        }
        
        public void SendMessage(PASSWORD_LIS_Client.WaitingRoomManagerServiceReference.ChatMessage message) {
            base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(PASSWORD_LIS_Client.WaitingRoomManagerServiceReference.ChatMessage message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public PASSWORD_LIS_Client.WaitingRoomManagerServiceReference.PlayerDTO[] GetConnectedPlayers() {
            return base.Channel.GetConnectedPlayers();
        }
        
        public System.Threading.Tasks.Task<PASSWORD_LIS_Client.WaitingRoomManagerServiceReference.PlayerDTO[]> GetConnectedPlayersAsync() {
            return base.Channel.GetConnectedPlayersAsync();
        }
    }
}
